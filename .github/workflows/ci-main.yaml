name: Transcendence CI

on:
  push:
    branches:
      - main
      - feat/*deploy*

jobs:
  define-version:
    runs-on: ubuntu-latest
    outputs:
      image_version: ${{ steps.set-version.outputs.image_version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Version based on Event
        id: set-version
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "This is a release event."
            IMAGE_VERSION="${{ github.event.release.tag_name }}"
          else
            echo "This is a regular push event."
            LATEST_TAG=$(git describe --tags --abbrev=0) || LATEST_TAG="0.0.0"
            IMAGE_VERSION="${LATEST_TAG}-next-${GITHUB_SHA::7}"
          fi
          echo "image_version=${IMAGE_VERSION}" >> $GITHUB_OUTPUT
  build:
    runs-on: ubuntu-latest
    needs:
      - define-version
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Login to docker registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push frontend docker image
        if:  ${{needs.paths-filter.outputs.was-app-changed}} == 'true'
        run: |
          docker build -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/transcendence-frontend:${{needs.define-version.outputs.image_version}} -f frontend/Dockerfile ./frontend
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/transcendence-frontend:${{needs.define-version.outputs.image_version}}  

      - name: Build and push backend docker
        run: |
          docker  build -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/transcendence-backend:${{needs.define-version.outputs.image_version}} -f backend/Dockerfile ./backend 
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/transcendence-backend:${{needs.define-version.outputs.image_version}}

  deploy:
    runs-on: ubuntu-latest
    needs: [ build, define-version ]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Test Show username
        run:  az account show --query user.name | cat

      - uses: Azure/get-keyvault-secrets@v1
        with:
          keyvault: 'fstaryk-key-vault-prgble'
          secrets: 'fstaryk-db-admin-password'
        id: mySecrets

      - id: setup-kubelogin
        name: setup-kubelogin
        run: |
          curl -sL https://github.com/Azure/kubelogin/releases/download/v0.0.28/kubelogin-linux-amd64.zip -o /tmp/kubelogin.zip
          unzip -j /tmp/kubelogin.zip -d /usr/local/bin
          chmod +x /usr/local/bin/kubelogin

      - name: Login to AKS
        run: |
          az aks get-credentials --resource-group rg-cm-academy --name ${{secrets.AZURE_CLUSTER_NAME}} --subscription "${{ secrets
          .AZURE_CREDENTIALS.subscriptionId }}" --overwrite-existing --admin
          kubelogin convert-kubeconfig --login azurecli

      - name: Deploy with Helm
        run: |
          helm upgrade -n transcendence --wait --install transcendence-app ./chart   --set image.version=${{needs.define-version.outputs.image_version}} --set image.repository=${{ secrets.REGISTRY_LOGIN_SERVER }} --set db.password=${{ steps.mySecrets.outputs.fstaryk-db-admin-password }}
